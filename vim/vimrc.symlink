filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on
set nocompatible

set enc=utf-8

" ----------------------------------------------------------------------------
"  I've had it with these motherfucking backups, in this motherfucking dir
" ----------------------------------------------------------------------------

set nobackup
set nowritebackup
set noswapfile

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set textwidth=85
set colorcolumn=+1
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block
set backspace=2

" ----------------------------------------------------------------------------
"  Folding
" ----------------------------------------------------------------------------

set foldlevelstart=0

nnoremap <Space> za
vnoremap <Space> za

nnoremap zO zCzO

function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" bored of having to hit shift
nnoremap ; :

" exit to normal mode with 'jj'
inoremap jj <ESC>


" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                    " show the cursor position all the time
set noshowcmd                " don't display incomplete commands
set nolazyredraw             " turn off lazy redraw
set number                   " show line numbers
set wildmenu                 " turn on wild menu
set wildmode=list:longest,full
set ch=2                     " command line height
set whichwrap+=<,>,h,l,[,]   " backspace and cursor keys wrap to
set shortmess=filtIoOA       " shorten messages
set report=0                 " tell us about changes
set nostartofline            " don't jump to the start of line when scrolling

syntax on
set background=light
colorscheme molokai

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch                " brackets/braces that is
set mat=5                    " duration to show matching brace (1/10 sec)
set incsearch                " do incremental searching
set laststatus=2             " always show the status line
set ignorecase               " ignore case when searching
set nohlsearch               " don't highlight searches
set visualbell               " shut the fuck up

let g:Powerline_cache_enabled = 1
let g:Powerline_symbols = 'fancy'

" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map <leader>s :call StripWhitespace ()<CR>

" ---------------------------------------------------------------------------
" Remap the tab key to do autocompletion or indentation depending on the
" context
" ---------------------------------------------------------------------------
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>
